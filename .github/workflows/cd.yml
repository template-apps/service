name: Continuous Deployment

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build:
    name: Build, Test, Tag and Push Docker Image to Registry
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    outputs:
      new_tag: ${{ steps.tagger.outputs.new_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: '0'

      - name: Set up Java and Build with Gradle (Test)
        run: |
          wget https://corretto.aws/downloads/latest/amazon-corretto-20-x64-linux-jdk.deb
          sudo dpkg -i amazon-corretto-20-x64-linux-jdk.deb
          export JAVA_HOME=/usr/lib/jvm/java-20-amazon-corretto
          export PATH=$JAVA_HOME/bin:$PATH
          ./gradlew build

      - name: Bump version and push GitHub tag (Release version)
        id: tagger
        uses: anothrNick/github-tag-action@1.64.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{vars.REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build Image and Push to ECR
        run: |
          export JAVA_HOME=/usr/lib/jvm/java-20-amazon-corretto
          export PATH=$JAVA_HOME/bin:$PATH
          ./rebuildAndPush.sh -r ${{ steps.login-ecr.outputs.registry }} \
            -n ${{vars.NAMESPACE}} -v "${{ steps.tagger.outputs.new_tag }}"

  deploy:
    name: Deploy image to EKS
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
          fetch-depth: '0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{vars.REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Fetch RDS DB Instance Identifier
        if: inputs.shouldDeployHelmChart
        id: dbInstanceIdentifierStep
        run: |
          dbInstanceIdentifier=$(aws rds describe-db-instances --db-instance-identifier ${{vars.CLUSTER}}-db --region ${{vars.REGION}} --query "DBInstances[].Endpoint.Address" --output text)
          echo "Output [$dbInstanceIdentifier]"
          echo "dbInstanceIdentifier=$dbInstanceIdentifier" >> $GITHUB_OUTPUT

      - name: Create DB if it doesn't exist
        if: inputs.shouldDeployHelmChart
        run: |
          mysql -h${{steps.dbInstanceIdentifierStep.outputs.dbInstanceIdentifier}} -u${{secrets.MYSQL_MASTER_USER} -p${{secrets.MYSQL_MASTER_PASSWORD}} \
          -e "CREATE DATABASE IF NOT EXISTS `user` DEFAULT CHARACTER SET utf8mb4;"

      - name: helm deploy
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.4
        with:
          aws-region: ${{vars.REGION}}
          cluster-name: ${{vars.CLUSTER}}
          config-files: infrastructure/helm/values.yaml
          chart-path: infrastructure/helm
          namespace: ${{vars.NAMESPACE}}
          values: image.repository=${{ steps.login-ecr.outputs.registry }}/${{vars.NAMESPACE}}-${{env.SERVICE}},image.tag=${{ needs.build.outputs.new_tag }},imagePullSecrets=,app.db.local=false,app.db.host=${{steps.dbInstanceIdentifierStep.outputs.dbInstanceIdentifier}},app.db.name=user,app.db.user=${{secrets.MYSQL_MASTER_USER}},app.db.password=${{secrets.MYSQL_MASTER_PASSWORD}}
          name: user
